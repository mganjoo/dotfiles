# Configuration for this prompt:
# * VCS_INFO_DISABLE: completely disable calls to vcs_info.
# * VCS_INFO_GIT_LESS_INFO_REPOS: array of repo names to show less vcs_info in
#   (this is useful in large repos).
# * PROMPT_CMD_MIN_EXEC_TIME: minimum execution time before showing time elapsed
#   on next prompt.
# * PROMPT_SYMBOL: symbol used for prompt.

shorten_path() {
  echo "${${${(@j:/:M)${(@s:/:)1}##.#?}:h}%/}/${1:t}"
}

# Check for difference from remote tracking branch, if any.
+vi-git-remote-status() {
  local ahead behind

  ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l | tr -d ' ')
  behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l | tr -d ' ')
  (( $ahead )) && hook_com[misc]+=" %F{green}+$ahead%f"
  (( $behind )) && hook_com[misc]+=" %F{red}-$behind%f"
  return 0
}

# Check for untracked files.
+vi-git-untracked-status() {
  if [[ $(git rev-parse --is-inside-work-tree 2>/dev/null) == 'true' ]] && \
    GIT_DISABLE_STATS=1 git status --porcelain | grep '??' &> /dev/null ; then
      hook_com[unstaged]+=" %F{red}●%f"
  fi
}

# Check for stashed changes.
+vi-git-stash-status() {
  if [[ -n $(git rev-parse -q --verify refs/stash) ]]; then
    hook_com[misc]+=" %F{magenta}✭%f"
  fi
}

# Dummy method that sets the misc message to .
+vi-git-dummy-status() {
  hook_com[misc]+=" ."
}

+vi-git-compact-branch() {
  if [[ "$hook_com[branch]" =~ "/" ]]; then
    hook_com[branch]=$(shorten_path "$hook_com[branch]")
  fi
}

prompt_human_time() {
  local tmp=$1
  local days=$(( tmp / 60 / 60 / 24 ))
  local hours=$(( tmp / 60 / 60 % 24 ))
  local minutes=$(( tmp / 60 % 60 ))
  local seconds=$(( tmp % 60 ))
  (( $days > 0 )) && echo -n "${days}d "
  (( $hours > 0 )) && echo -n "${hours}h "
  (( $minutes > 0 )) && echo -n "${minutes}m "
  echo "${seconds}s"
}

timestamp_info() {
  unset prompt_timestamp
  typeset -gA prompt_timestamp

  local stop=$EPOCHSECONDS
  local start=${cmd_timestamp:-$stop}
  integer elapsed=${stop}-${start}
  if (($elapsed > ${PROMPT_CMD_MIN_EXEC_TIME:=5})); then
    prompt_timestamp[elapsed]="%F{yellow}$(prompt_human_time $elapsed)%f "
  fi
  prompt_timestamp[datetime]="$(strftime "%H:%M:%S" $stop)"
}

prompt_mganjoo_precmd() {
  setopt LOCAL_OPTIONS NO_XTRACE NO_KSH_ARRAYS

  # PWD
  local pwd="${PWD/#$HOME/~}"
  if [[ "$pwd" == (#m)[/~] ]]; then
    # If path is only / or ~, do nothing else
    prompt_pwd="$MATCH"
    unset MATCH
  else
    # Replace each path component with one letter except the last one
    prompt_pwd=$(shorten_path "$pwd")
  fi

  # VCS
  if [[ "$VCS_INFO_DISABLE" -eq "1" ]]; then
    vcs_info_msg_0_=""
  else
    vcs_info
  fi

  # Python
  python-info

  # Time
  timestamp_info

  # Reset since preexec isn't always triggered
  unset cmd_timestamp
}

prompt_mganjoo_preexec() {
  cmd_timestamp=$EPOCHSECONDS
}

prompt_mganjoo_setup() {
  setopt LOCAL_OPTIONS NO_XTRACE NO_KSH_ARRAYS
  prompt_opts=(cr percent subst)

  zmodload zsh/datetime
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  add-zsh-hook precmd prompt_mganjoo_precmd
  add-zsh-hook preexec prompt_mganjoo_preexec

  zstyle ':vcs_info:*' enable git hg
  zstyle ':vcs_info:*' check-for-changes true
  zstyle ':vcs_info:*' stagedstr ' %F{green}●%f'
  zstyle ':vcs_info:*' unstagedstr ' %F{yellow}●%f'
  zstyle ':vcs_info:*' formats ' %F{blue}%b%f%c%u%m'
  zstyle ':vcs_info:*' actionformats ' on %F{blue}%b%f%c%u (%F{cyan}%a%f)%m'
  zstyle ':vcs_info:git*+set-message:*' hooks \
    git-untracked-status \
    git-stash-status \
    git-remote-status \
    git-compact-branch

  for repo in ${VCS_INFO_GIT_LESS_INFO_REPOS[@]}; do
    # Disable checking for staged, unstaged and untracked files.
    zstyle ":vcs_info:*:*:$repo" check-for-changes false
    zstyle ":vcs_info:git*+set-message:*:$repo" hooks \
      git-dummy-status \
      git-stash-status \
      git-remote-status \
      git-compact-branch
  done

  zstyle ':prompt:virtualenv' format ' %F{green}(%v)%f'
  zstyle ':prompt:condaenv' format ' %F{green}(%v)%f'

  local prompt_symbol="${PROMPT_SYMBOL:-%%}"
  zstyle ':prompt:indicator:keymap:insert' format \
    "%(?.%F{blue}.%B%F{red})${prompt_symbol}%f%b"
  zstyle ':prompt:indicator:keymap:command' format \
    "${prompt_symbol}"

  PROMPT='%F{yellow}${prompt_pwd}%f${vcs_info_msg_0_}${python_info[virtualenv]}${python_info[condaenv]}
${editor_info[keymap]} '
  RPROMPT='${prompt_timestamp[elapsed]}${prompt_timestamp[datetime]}'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_mganjoo_setup "$@"

# vim: ft=zsh
