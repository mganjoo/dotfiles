# Custom prompt defnition.

# Additional methods for git status (not covered by vcs_info).
# Controlled by environment variables:
# * VCS_INFO_DISABLE: completely disable calls to vcs_info.
# * VCS_INFO_GIT_LESS_INFO_REPOS: array of repo names to show less vcs_info in
#   (this is useful in large repos).

# Check for difference from remote tracking branch, if any.
+vi-git-remote-status() {
  local ahead behind

  ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l | tr -d ' ')
  behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l | tr -d ' ')
  (( $ahead )) && hook_com[branch]="${hook_com[branch]} %F{green}+$ahead%f"
  (( $behind )) && hook_com[branch]="${hook_com[branch]} %F{red}-$behind%f"
}

# Check for untracked files.
+vi-git-untracked-status() {
  if [[ $(git rev-parse --is-inside-work-tree 2>/dev/null) == 'true' ]] && \
    GIT_DISABLE_STATS=1 git status --porcelain | grep '??' &> /dev/null ; then
      hook_com[unstaged]="${hook_com[unstaged]} %F{red}●%f"
  fi
}

# Check for stashed changes.
+vi-git-stash-status() {
  if [[ -n $(git rev-parse -q --verify refs/stash) ]]; then
    hook_com[misc]+=" %F{magenta}✭%f"
  fi
}

# Dummy method that sets the misc message to .
+vi-git-dummy-status() {
  hook_com[misc]+=" ."
}

prompt_mganjoo_precmd() {
  setopt LOCAL_OPTIONS NO_XTRACE NO_KSH_ARRAYS

  # Obtain current working directory.
  local pwd="${PWD/#$HOME/~}"
  if [[ "$pwd" == (#m)[/~] ]]; then
    prompt_pwd="$MATCH"
    unset MATCH
  else
    prompt_pwd="${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}/${pwd:t}"
  fi

  # Get VCS information.
  if [[ "$VCS_INFO_DISABLE" -eq "1" ]]; then
    vcs_info_msg_0_=""
  else
    vcs_info
  fi

  # Get Python information.
  python-info
}

prompt_mganjoo_setup() {
  setopt LOCAL_OPTIONS NO_XTRACE NO_KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load information for prompt.
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  # Add hook for calling dynamic information before each command.
  add-zsh-hook precmd prompt_mganjoo_precmd

  # Set prompt style for keymap.
  zstyle ':prompt:indicator:keymap:insert' format \
    '%B%F{red}❯%F{yellow}❯%F{green}❯%f%b'
  zstyle ':prompt:indicator:keymap:command' format '❯❯❯'

  # Set vcs_info parameters.
  zstyle ':vcs_info:*' enable git hg

  zstyle ':vcs_info:*' check-for-changes true
  zstyle ':vcs_info:*' stagedstr ' %F{green}●%f'
  zstyle ':vcs_info:*' unstagedstr ' %F{yellow}●%f'
  zstyle ':vcs_info:*' formats ' on %F{blue}%b%f%c%u%m'
  zstyle ':vcs_info:*' actionformats ' on %F{blue}%b%f%c%u (%F{cyan}%a%f)%m'
  zstyle ':vcs_info:git*+set-message:*' hooks \
    git-untracked-status \
    git-stash-status \
    git-remote-status

  for repo in ${VCS_INFO_GIT_LESS_INFO_REPOS[@]}; do
    # Disable checking for staged, unstaged and untracked files.
    zstyle ":vcs_info:*:*:$repo" check-for-changes false
    zstyle ":vcs_info:git*+set-message:*:$repo" hooks \
      git-dummy-status \
      git-stash-status \
      git-remote-status
  done

  zstyle ':prompt:virtualenv' format ' %F{green}(%v)%f'

  PROMPT='%F{yellow}%m%f${vcs_info_msg_0_}${python_info[virtualenv]}
%F{cyan}${prompt_pwd}%f ${editor_info[keymap]} '
  RPROMPT='%F{red}%(?..[%?])%f'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_mganjoo_setup "$@"

# vim: ft=zsh
